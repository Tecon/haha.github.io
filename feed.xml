<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>tecon.github.io</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-05-28T02:03:07+08:00</updated> <author> <name></name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>LEGION Y7000P 2019安装黑苹果</title><link href="/posts/LEGION-Y7000P-2019%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/" rel="alternate" type="text/html" title="LEGION Y7000P 2019安装黑苹果" /><published>2023-05-27T22:06:49+08:00</published> <updated>2023-05-28T02:02:28+08:00</updated> <id>/posts/LEGION-Y7000P-2019%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</id> <content src="/posts/LEGION-Y7000P-2019%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/" /> <author> <name>{"name"=>"liuhe", "link"=>"https://tecon.github.io"}</name> </author> <category term="life" /> <category term="好玩" /> <summary> 硬件准备： 型号：Legion Y7000P 2019 CPU：INTEL i5-9300H@2.4G 内存：2*8G 硬盘：三星PM981A（1T） 无线：Intel AC9560 有线：RTL8111H 购买西数SN770替换原有的PM981A，其他保持不变，使用intel AC9560无线网卡，仅满足日常使用，其他诸如随航、隔空投递暂时忽略，后续根据使用体验考虑是否更换无线网卡 软件准备 镜像： 使用macOS Monterey 12.6.5（以后也准备在这个系统养老了） 黑苹果专用引导系统镜像 EFI： 配置如果和上面笔者的配置相同可以直接使用最下面经过修改和验证后的EFI GitHub - gclm/Hackintosh-LEGION-Y7000P-I7-9750H: 联想拯救者Y7000P I7-9750H 准完美级 EFI 安装过程 ... </summary> </entry> <entry><title>科目三</title><link href="/posts/%E7%A7%91%E7%9B%AE%E4%B8%89/" rel="alternate" type="text/html" title="科目三" /><published>2023-01-29T20:37:04+08:00</published> <updated>2023-02-19T21:38:13+08:00</updated> <id>/posts/%E7%A7%91%E7%9B%AE%E4%B8%89/</id> <content src="/posts/%E7%A7%91%E7%9B%AE%E4%B8%89/" /> <author> <name>{"name"=>"liuhe", "link"=>"https://tecon.github.io"}</name> </author> <category term="life" /> <category term="驾考" /> <summary> 本文记录科目三考试时的一些注意事项，不同驾校略有区别，仅供参考 开始前准备 身份证交给安全员，核对身份，调整座椅，检查左右后视镜，内视镜 检查车辆各项状态： 灯光总开关在0位 拨动灯光操纵杆确认操纵杆在中间位置 档位在空挡位 手刹为拉起状态 上车准备 开始考试，观察左后视镜，车门开一条缝，确认安全后下车，沿车身逆时针一周检查，到达车身后方保险杠位置、右前轮胎、前方车牌、左前轮胎时，按下感应器，确认安全上车，关门，系上安全带 核对身份后开机准备考试，开始夜间灯光模拟考试 夜间行驶模拟模拟灯光 打开前照灯（近光灯） 夜间通过坡路（远近交替两下） 夜间在路边临时停车（打开示廓灯、危险警报灯，关闭近光灯【后面的所有项目都需要先关闭示廓灯、警报灯】） 夜间与机动车会车（远近交替两... </summary> </entry> <entry><title>科目二</title><link href="/posts/%E7%A7%91%E7%9B%AE%E4%BA%8C/" rel="alternate" type="text/html" title="科目二" /><published>2023-01-29T20:27:04+08:00</published> <updated>2023-02-19T21:38:13+08:00</updated> <id>/posts/%E7%A7%91%E7%9B%AE%E4%BA%8C/</id> <content src="/posts/%E7%A7%91%E7%9B%AE%E4%BA%8C/" /> <author> <name>{"name"=>"liuhe", "link"=>"https://tecon.github.io"}</name> </author> <category term="life" /> <category term="驾考" /> <summary> 本文记录科目二考试时的一些注意事项，不同驾校略有区别，仅供参考 倒车入库、出库 右库 肩膀与黄色控制线对齐停车，准备倒车 倒车时观察左后视镜，下沿压黄色控制线时向右打死方向盘 打死后观察右后视镜，车身压入库的虚线后回一圈方向盘 观察右后视镜与库角斜线有1指宽度时重新向右打死正方向盘 观察左右后视镜，调整方向盘，保持车身与车库黄线平行（哪边越来越窄往那边打方向盘） 左后视镜下边沿与黄线贴合，停车 出库时观察左后方车轮，出车库黄色虚线时向右打死方向盘，车身回正后打正方向盘 左库 肩膀与黄色控制线对齐停车，准备倒车 倒车时观察左后视镜下沿压黄色控制线时向左打死方向盘 观察左后视镜，后车轮刚好在黄色虚线边缘为宜（与车库库角保持2指宽度），直至车身与车库两侧黄线平行，回正方向盘 左后视镜下边沿与黄线贴合，停车 出库时观察左后方车轮，出车库黄色虚线时向左打死... </summary> </entry> <entry><title>MySQL自问自答</title><link href="/posts/9.MySQL%E8%87%AA%E9%97%AE%E8%87%AA%E7%AD%94/" rel="alternate" type="text/html" title="MySQL自问自答" /><published>2022-09-17T06:46:49+08:00</published> <updated>2023-01-30T02:39:33+08:00</updated> <id>/posts/9.MySQL%E8%87%AA%E9%97%AE%E8%87%AA%E7%AD%94/</id> <content src="/posts/9.MySQL%E8%87%AA%E9%97%AE%E8%87%AA%E7%AD%94/" /> <author> <name>{"name"=>"liuhe", "link"=>"https://tecon.github.io"}</name> </author> <category term="work" /> <category term="利其器" /> <summary> 文章中未说明版本时以MySQL8.0为准 1、mysql的结构是怎么样的？ mysql是插件式的数据库管理系统，整体分为server层和引擎层，server层用于管理连接和用户权限、执行sql语句的分析与优化；引擎层用于实际数据的管理，可以实现插件式的装载与移除，故而可以选用不同的存储引擎。 2、何为存储引擎，为何要有存储引擎？不同的mysql存储引擎有哪些优劣、适用场景 作为数据库管理系统，核心功能是数据的管理，围绕数据的管理需要有连接管理、权限管理、sql语句分析与执行等相关功能，核心功能单独抽出来作为存储引擎，实现插件式的load与unload，一方面大大增强了整个dbms的可扩展性，针对不同场景的数据管理可以选用特定的存储引擎，大大提升数据管理的效率。另一方面，通过引擎层包装数据管理细节，应用开发者仅需关心一致性的server层api（sql语法）即可，可... </summary> </entry> <entry><title>AQS学习纪要</title><link href="/posts/AQS%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81/" rel="alternate" type="text/html" title="AQS学习纪要" /><published>2022-09-07T06:46:49+08:00</published> <updated>2023-03-22T14:37:58+08:00</updated> <id>/posts/AQS%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81/</id> <content src="/posts/AQS%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81/" /> <author> <name>{"name"=>"liuhe", "link"=>"https://tecon.github.io"}</name> </author> <category term="work" /> <category term="利其器" /> <summary> 本文（以ReentrantLock为例）记录下AQS学习纪要 AQS维护了state字段，通过原子的CAS修改state，实现“多个线程抢占锁”这一语义，同时对于等待抢占锁的多个线程使用CLH队列的变种-FIFO双端队列来维护，通过park(thread)来确保未抢占到锁的线程等待下次抢占锁。释放锁时，同样CAS修改state，并unpark(thread)唤醒等待的线程 1、数据结构 AQS维护了以Node为节点的CLH变种的FIFO队列，尾部入队，头部出队，等待锁时入队，获取到锁后出队。 /* * &amp;lt;pre&amp;gt; * +------+ prev +-----+ +-----+ * head | | &amp;lt;---- | | &amp;lt;---- | | tail * | | ----&amp;gt... </summary> </entry> </feed>
